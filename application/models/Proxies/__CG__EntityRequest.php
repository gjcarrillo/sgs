<?php

namespace DoctrineProxies\__CG__\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Request extends \Entity\Request implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setCreationDate($creationDate)
    {
        $this->__load();
        return parent::setCreationDate($creationDate);
    }

    public function getCreationDate()
    {
        $this->__load();
        return parent::getCreationDate();
    }

    public function setComment($comment)
    {
        $this->__load();
        return parent::setComment($comment);
    }

    public function getComment()
    {
        $this->__load();
        return parent::getComment();
    }

    public function setStatus($status)
    {
        $this->__load();
        return parent::setStatus($status);
    }

    public function getStatus()
    {
        $this->__load();
        return parent::getStatus();
    }

    public function getStatusByText()
    {
        $this->__load();
        return parent::getStatusByText();
    }

    public function setStatusByText($status)
    {
        $this->__load();
        return parent::setStatusByText($status);
    }

    public function addDocument(\Entity\Document $documents)
    {
        $this->__load();
        return parent::addDocument($documents);
    }

    public function removeDocument(\Entity\Document $documents)
    {
        $this->__load();
        return parent::removeDocument($documents);
    }

    public function getDocuments()
    {
        $this->__load();
        return parent::getDocuments();
    }

    public function setUserOwner(\Entity\User $userOwner)
    {
        $this->__load();
        return parent::setUserOwner($userOwner);
    }

    public function getUserOwner()
    {
        $this->__load();
        return parent::getUserOwner();
    }

    public function addHistory(\Entity\History $history)
    {
        $this->__load();
        return parent::addHistory($history);
    }

    public function removeHistory(\Entity\History $history)
    {
        $this->__load();
        return parent::removeHistory($history);
    }

    public function getHistory()
    {
        $this->__load();
        return parent::getHistory();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'creationDate', 'comment', 'status', 'documents', 'history', 'userOwner');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}